replicaCount: 1

image:
  repository: nginx
  tag: 1.19.1
  pullPolicy: Always

## The list of ports that your app listens on
containerPort: 80

nameOverride: ""
fullnameOverride: ""

keel:
  # keel policy (all/major/minor/patch/force)
  policy: force
  # trigger type, defaults to events such as pubsub, webhooks
  trigger: poll
  # polling schedule
  pollSchedule: "@every 1m"
  # approvals required to proceed with an update
  approvals: 1
  # only makes a difference when used with 'force' policy, will only update if tag matches :dev->:dev, :prod->:prod
  match-tag: true


podAnnotations: {}
#  prometheus.io/scrape: "true"
#  prometheus.io/path: "/actuator/prometheus"

service:
  enabled: true
  httpPort: 80
  ## If service.type is not set to NodePort, the following statement
  ## will be ignored.
  ##
  # nodePort: 32015

  ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
  ##
  type: ClusterIP

  ## Service annotations
  ##
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:xx-xxxx-x:xxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx
  #   external-dns.alpha.kubernetes.io/hostname: drone.domain.tld.

ingress:
  ## If true, Ingress will be created.
  ##
  enabled: false

  ## Ingress annotations
  ##
  # annotations:
  #   kubernetes.io/ingress.class: gce
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: 'true'

  ## hostnames must be provided if Ingress is enabled
  ##
  # hosts:
  #   - spring.example.io

  ## Ingress TLS configuration secrets
  ## Must be manually created in the namespace
  ##
  # tls:
  #   - secretName: spring-tls
  #     hosts:
  #       - spring.example.io

serviceAccount:
  create: true
  # name: ~

rbac:
  create: true

## uncomment and modify the following livenessProbe and readinessProbe.
## These defaults should work with anything that uses the spring health actuator.
livenessProbe: {}
#  httpGet:
#    path: /actuator/health
#    port: http
#  initialDelaySeconds: 300
#  periodSeconds: 10
readinessProbe: {}
#  httpGet:
#    path: /actuator/health
#    port: http
#  initialDelaySeconds: 60
#  periodSeconds: 10


nginx: {}
#  nginxconf: |-
#    stream {
#     upstream db {
#       server entrnce-matcher-keycloak-staging.cos6tqdvfk4n.eu-central-1.rds.amazonaws.com:5432;
#     }
#
#     server {
#       listen 5432;
#       proxy_pass db;
#     }
#    }
