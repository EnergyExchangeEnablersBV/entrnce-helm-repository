apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spring.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: {{ include "spring.name" . }}
    chart: {{ include "spring.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    keel.sh/policy: {{ .Values.keel.policy  }}
    keel.sh/trigger: {{ .Values.keel.trigger  }}
    keel.sh/approvals: {{ .Values.keel.approvals | quote }}
  annotations:
      keel.sh/pollSchedule: {{ .Values.keel.pollSchedule | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "spring.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "spring.name" . }}
        release: {{ .Release.Name }}
      {{- if .Values.podAnnotations }}
      annotations:
      {{ toYaml .Values.podAnnotations | indent 8 }}
    {{ end }}
    spec:
      serviceAccountName: {{ .Release.Namespace }}-{{ template "spring.fullname" . }}
      {{- if  .Values.securityContext }}
      securityContext:
      {{ toYaml .Values.securityContext | indent 8 }}
      {{ end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.profile }}
            {{- range $secretKeyRefEnvKey, $secretKeyRefEnvValue := .Values.secretKeyRefEnv }}
            {{- range $secretName, $secretValue := $secretKeyRefEnvValue }}
            {{- range $key, $value := $secretValue }}
            - name: {{ $value }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secretKeyRefEnvKey}}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if hasKey .Values.spring "profile" }}
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.spring.profile }}
              {{- end }}
            {{- if .Values.spring.trustKubernetesCertificates }}
            - name: KUBERNETES_TRUST_CERTIFICATES
              value: "true"
            {{- end }}
            {{- if hasKey .Values.spring.config "secretName" }}
            - name: SPRING_CONFIG_ADDITIONAL_LOCATION
              value: "file:/config/secret.yml"
            {{- end }}
            - name: JAVA_ENABLE_DEBUG
              {{- if .Values.debugMode }}
              value: "true"
              {{- else }}
              value: "false"
            {{- end }}
            {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if and (eq .Values.spring.config.type "file") (hasKey .Values.spring.config "content") }}
            - name: config-volume
              mountPath: /app/config/
            {{- end }}
            {{- if hasKey .Values.spring.config "secretName" }}
            - name: secret-file
              mountPath: /app/config/secret.yml
              subPath: secret.yml
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPort }}
              protocol: TCP
          {{- if .Values.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: data
          emptyDir: {}
      {{- if and (eq .Values.spring.config.type "file") (hasKey .Values.spring.config "content") }}
        - name: config-volume
          configMap:
            name: {{ include "spring.fullname" . }}-config
      {{- end }}
      {{- if hasKey .Values.spring.config "secretName" }}
        - name: secret-file
          secret:
            secretName: {{ .Values.spring.config.secretName }}
      {{- end }}
      imagePullSecrets:
        - name: {{ .Values.imageCredentials.name }}
